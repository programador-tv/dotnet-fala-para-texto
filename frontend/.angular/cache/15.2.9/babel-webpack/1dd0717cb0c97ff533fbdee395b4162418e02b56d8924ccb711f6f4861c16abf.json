{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nfunction AppComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_0_Template_button_click_1_listener() {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.startRecording());\n    });\n    i0.ɵɵtext(2, \"Iniciar Grava\\u00E7\\u00E3o\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AppComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"p\");\n    i0.ɵɵtext(2, \"Gravando...\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_1_Template_button_click_3_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.stopRecording());\n    });\n    i0.ɵɵtext(4, \"Interromper Grava\\u00E7\\u00E3o\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction AppComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"audio\", 2);\n    i0.ɵɵelementStart(2, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_2_Template_button_click_2_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.playRecordedAudio());\n    });\n    i0.ɵɵtext(3, \"Reproduzir \\u00C1udio\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"button\", 1);\n    i0.ɵɵlistener(\"click\", function AppComponent_div_2_Template_button_click_4_listener() {\n      i0.ɵɵrestoreView(_r8);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.sendAudio());\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"src\", ctx_r2.audioUrl, i0.ɵɵsanitizeUrl);\n  }\n}\nexport class AppComponent {\n  constructor(http) {\n    this.http = http;\n    this.recordedChunks = [];\n    this.isRecording = false;\n    this.audioRecorded = false;\n    this.showConsole = false;\n    this.stoppedRecord = false;\n  }\n  startRecording() {\n    console.log(\"Gravando\");\n    this.recordedChunks = [];\n    this.isRecording = true;\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      this.mediaRecorder = new MediaRecorder(stream);\n      this.mediaRecorder.ondataavailable = event => {\n        if (event.data.size > 0) {\n          this.recordedChunks.push(event.data);\n        }\n      };\n      this.mediaRecorder.onstop = () => {\n        const audioBlob = new Blob(this.recordedChunks, {\n          type: 'audio/webm'\n        });\n        this.audioUrl = URL.createObjectURL(audioBlob);\n        this.audioRecorded = true;\n      };\n      this.mediaRecorder.start();\n    }).catch(error => {\n      console.error('Erro ao acessar o microfone: ', error);\n    });\n  }\n  stopRecording() {\n    if (this.isRecording) {\n      this.mediaRecorder.stop();\n      this.isRecording = false;\n      this.stoppedRecord = true;\n      this.audioRecorded = true;\n      this.showConsole = true;\n    }\n  }\n  clickouPararGravacao() {\n    this.audioRecorded = true;\n    //Mostra o reprodutor\n    this.showConsole = true;\n  }\n  sendAudio() {\n    return this.http.post(\"http://localhost:5076/\", this.audioUrl).subscribe();\n  }\n  playRecordedAudio() {\n    this.showConsole = true;\n    const audioElement = new Audio(this.audioUrl);\n    // audioElement.play();\n  }\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 3,\n  vars: 3,\n  consts: [[4, \"ngIf\"], [3, \"click\"], [\"controls\", \"\", 3, \"src\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, AppComponent_div_0_Template, 3, 0, \"div\", 0);\n      i0.ɵɵtemplate(1, AppComponent_div_1_Template, 5, 0, \"div\", 0);\n      i0.ɵɵtemplate(2, AppComponent_div_2_Template, 5, 1, \"div\", 0);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", !ctx.isRecording);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.isRecording);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.clickouPararGravacao && ctx.showConsole);\n    }\n  },\n  dependencies: [i2.NgIf],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["i0","AppComponent","constructor","http","startRecording","console","log","recordedChunks","isRecording","navigator","mediaDevices","getUserMedia","audio","then","stream","mediaRecorder","MediaRecorder","ondataavailable","event","data","size","push","onstop","audioBlob","Blob","type","audioUrl","URL","createObjectURL","audioRecorded","start","catch","error","stopRecording","stop","stoppedRecord","showConsole","clickouPararGravacao","sendAudio","post","subscribe","playRecordedAudio","audioElement","Audio","selectors","decls","vars","consts","template"],"sourceRoot":"","sources":["C:\\Users\\muril\\OneDrive\\Área de Trabalho\\Boca Suja Audio texto\\dotnet-fala-para-texto\\frontend\\src\\app\\app.component.html","C:\\Users\\muril\\OneDrive\\Área de Trabalho\\Boca Suja Audio texto\\dotnet-fala-para-texto\\frontend\\src\\app\\app.component.ts"],"sourcesContent":["<!-- Se não está gravando, mostra o botão startRecording -->\r\n<div *ngIf=\"!isRecording\">\r\n  <button (click)=\"startRecording()\">Iniciar Gravação</button>\r\n</div>\r\n<!-- Se está gravando, mostra o texto gravando e o botão para parar de gravar -->\r\n<div *ngIf=\"isRecording\">\r\n  <p>Gravando...</p>\r\n  <button (click)=\"stopRecording()\">Interromper Gravação</button>\r\n</div>\r\n\r\n\r\n<!-- Se apertou pra interromper e o console foi declarado tru, exibe o console e o botão que chama o método para dar play no audio -->\r\n<div *ngIf=\"clickouPararGravacao && showConsole\">\r\n  <audio [src]=\"audioUrl\" controls></audio>\r\n  <button (click)=\"playRecordedAudio()\">Reproduzir Áudio</button>\r\n  <button (click)=\"sendAudio()\"></button>\r\n</div>\r\n\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n\r\n  mediaRecorder: any;\r\n  recordedChunks: any[] = [];\r\n  isRecording = false;\r\n  audioRecorded = false;\r\n  audioUrl: string | undefined;\r\n  showConsole: boolean = false;\r\n  stoppedRecord:boolean = false;\r\n\r\n  constructor(private http : HttpClient){}\r\n\r\n  startRecording() {\r\n    console.log(\"Gravando\")\r\n    this.recordedChunks = [];\r\n    this.isRecording = true;\r\n\r\n    navigator.mediaDevices.getUserMedia({ audio: true })\r\n      .then(stream => {\r\n        this.mediaRecorder = new MediaRecorder(stream);\r\n\r\n        this.mediaRecorder.ondataavailable = (event: { data: { size: number; }; }) => {\r\n          if (event.data.size > 0) {\r\n            this.recordedChunks.push(event.data);\r\n          }\r\n        };\r\n\r\n        this.mediaRecorder.onstop = () => {\r\n          const audioBlob = new Blob(this.recordedChunks, { type: 'audio/webm' });\r\n          this.audioUrl = URL.createObjectURL(audioBlob);\r\n          this.audioRecorded = true;\r\n        \r\n        };\r\n\r\n        this.mediaRecorder.start();\r\n      })\r\n      .catch(error => {\r\n        console.error('Erro ao acessar o microfone: ', error);\r\n      });\r\n  }\r\n\r\n  stopRecording() {\r\n    if (this.isRecording) {\r\n      this.mediaRecorder.stop();\r\n      this.isRecording = false;\r\n      this.stoppedRecord = true;\r\n      this.audioRecorded=true;\r\n      this.showConsole = true;\r\n    }\r\n  }\r\n  \r\n\r\n  clickouPararGravacao(){\r\n    this.audioRecorded = true;\r\n    //Mostra o reprodutor\r\n    this.showConsole = true;\r\n    \r\n  }\r\n\r\n  sendAudio() {\r\n    return this.http.post(\"http://localhost:5076/\",this.audioUrl).subscribe();\r\n  }\r\n\r\n  playRecordedAudio() {\r\n    this.showConsole=true;\r\n    const audioElement = new Audio(this.audioUrl);\r\n    // audioElement.play();\r\n  }\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}